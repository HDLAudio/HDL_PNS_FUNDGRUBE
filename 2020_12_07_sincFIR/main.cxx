string name="XY";
string description="xy";

/*

experimenting with windowed sinc FIR lowpass filters because i'll need one
when i keep on implementing my oversampling class

*/

array<string> inputParametersNames = { "FIR"};
array<string> inputParametersUnits = {};
array<string> inputParametersEnums = {"OFF;ON"};
array<double> inputParameters( inputParametersNames.length );
array<int> inputParametersSteps = {2};
array<double> inputParametersMin = {0};
array<double> inputParametersMax = {1};

double tau = 6.28318530718;
double pi = tau * .5;

ImpulseResponse ir(IRTest::make1());
Convolution convolution(ir);
bool convolutionEnabled;

void processBlock(BlockData& data) {
	processParameters();
	
	if(convolutionEnabled) convolution.process(data, 0); // apply convolution on channel 0
	
	for(uint s = 0; s < data.samplesToProcess; ++s) // copy left to right channel to save cpu, because why not
		data.samples[1][s] = data.samples[0][s];
}

class ImpulseResponse {
	ImpulseResponse(){}
	ImpulseResponse(array<double>& ir) { data = ir; }
	void set(array<double>& ir){ data = ir; }
	array<double> data;
}

class Convolution {
	Convolution(ImpulseResponse& impulseResponse) {
		ir = impulseResponse;
		buffer.length = ir.data.length;
		wIdx = 0;
	}
	void process(BlockData& data, int ch) {
		for(uint s = 0; s < data.samplesToProcess; ++s) {
			++wIdx;
			if(wIdx == buffer.length) wIdx = 0;
			buffer[wIdx] = data.samples[ch][s];
			int rIdx = wIdx;
			double y = buffer[rIdx] * ir.data[0];
			for(uint i = 1; i < buffer.length; ++i) {
				--rIdx;
				if(rIdx == -1) rIdx = buffer.length - 1;
				y += buffer[rIdx] * ir.data[i];
			}
			data.samples[ch][s] = y;
		}
	}
	array<double> buffer;
	ImpulseResponse ir;
	uint wIdx;
}

void processParameters() {
	convolutionEnabled = inputParameters[0] > .5;
}

double rint(double d) {
    if(d < 0)
		return d - .5;
    return d + .5;
}

namespace IRTest{
	// a namesapce that returns specific IRs made with https://www.earlevel.com/main/2010/12/05/building-a-windowed-sinc-filter/
	// i wanna learn how this page's algorithm works at some point too but for now i just wanna find out what it can do.
	
	array<double> make0() {
		// factor = .5, length = 199, rejection = 90, gain = 1
		return {-0.000003055192744486332,0,0.0000061701090803117584,0,-0.000010643939298569722,0,0.00001682462081495755,0,-0.000025113634674665028,0,0.00003596987707798252,0,-0.000049913399161288374,0,0.00006752899380647781,0,-0.0000894696196541565,0,0.00011645966633212502,0,-0.00014929808224601864,0,0.00018886140904096721,0,-0.00023610679134593367,0,0.00029207506293415445,0,-0.0003578940497195854,0,0.0004347822739094624,0,-0.0005240533023573434,0,0.0006271210504813982,0,-0.0007455064368163751,0,0.0008808458968472592,0,-0.001034902391408623,0,0.00120957972825272,0,-0.0014069412381212442,0,0.0016292341481756144,0,-0.0018789213967819803,0,0.0021587231796921006,0,-0.0024716712540583633,0,0.0028211801034585546,0,-0.003211140492392964,0,0.0036460431095941743,0,-0.004131143071956945,0,0.0046726806762556385,0,-0.0052781807604445705,0,0.005956863818275,0,-0.006720219055958438,0,0.007582817208415843,0,-0.008563486986580616,0,0.009687058247814974,0,-0.010987016219297286,0,0.012509673341860275,0,-0.014320976267770022,0,0.016518116943726336,0,-0.019250430650365736,0,0.02275958098750915,0,-0.027463577393639915,0,0.03415280746865259,0,-0.04452211172185513,0,0.06297981704464543,0,-0.1056928660303178,0,0.3181733751122296,0.5000008986001705,0.3181733751122296,0,-0.1056928660303178,0,0.06297981704464543,0,-0.04452211172185513,0,0.03415280746865259,0,-0.027463577393639915,0,0.02275958098750915,0,-0.019250430650365736,0,0.016518116943726336,0,-0.014320976267770022,0,0.012509673341860275,0,-0.010987016219297286,0,0.009687058247814974,0,-0.008563486986580616,0,0.007582817208415843,0,-0.006720219055958438,0,0.005956863818275,0,-0.0052781807604445705,0,0.0046726806762556385,0,-0.004131143071956945,0,0.0036460431095941743,0,-0.003211140492392964,0,0.0028211801034585546,0,-0.0024716712540583633,0,0.0021587231796921006,0,-0.0018789213967819803,0,0.0016292341481756144,0,-0.0014069412381212442,0,0.00120957972825272,0,-0.001034902391408623,0,0.0008808458968472592,0,-0.0007455064368163751,0,0.0006271210504813982,0,-0.0005240533023573434,0,0.0004347822739094624,0,-0.0003578940497195854,0,0.00029207506293415445,0,-0.00023610679134593367,0,0.00018886140904096721,0,-0.00014929808224601864,0,0.00011645966633212502,0,-0.0000894696196541565,0,0.00006752899380647781,0,-0.000049913399161288374,0,0.00003596987707798252,0,-0.000025113634674665028,0,0.00001682462081495755,0,-0.000010643939298569722,0,0.0000061701090803117584,0,-0.000003055192744486332};
	}
	
	array<double> make1() {
		// factor = .2, length = 199, rejection = 90, gain = 1.
		return {-0.0000017958013329629392,-0.000004244146293789394,-0.000005868135827791082,-0.000004829620627224069,0,0.000007933433203193437,0.000016001201746706175,0.000019666272418457612,0.000014761457752771285,0,-0.000021142611483261753,-0.000040439716137378155,-0.000047470571766681586,-0.00003422270709081759,0,0.00004579745989325527,0.00008509085880939846,0.00009727933667975703,0.00006845343044659998,0,-0.00008775541104241866,-0.00015995022407666937,-0.00017961828331638003,-0.00012429381710443675,0,0.0001545479964404763,0.0002777805252547731,0.00030783794483799884,0.00021036532399005902,0,-0.0002555591912963088,-0.00045440061331751346,-0.0004984054445727851,-0.00033725438732877256,0,0.000402222120842694,0.0007090203714048427,0.0007712608858983274,0.0005177494082977136,0,-0.0006083017503010663,-0.0010647468033007158,-0.0011503813056690617,-0.0007672314627030939,0,0.0008903925455355188,0.0015494972864056608,0.0016648187772294748,0.001104404805543951,0,-0.0012688685421190658,-0.002197754405412634,-0.0023507044124620813,-0.0015527116704284528,0,0.001769730764168804,0.00305398305381819,0.003255155997304318,0.002143095255795543,0,-0.0024282305097344335,-0.004179352395182462,-0.004443993539053824,-0.0029194799546829464,0,0.003296141237604943,0.00566532706931101,0.006017472498842669,0.003950054660306627,0,-0.0044570782891071295,-0.007662686933554121,-0.008144378671865767,-0.005352125763130234,0,0.006061524638772063,0.010449297196820782,0.011143508052010462,0.007353018267926311,0,-0.008417677842880654,-0.014611633534411483,-0.015709698578007282,-0.010465607322941285,0,0.012277325204595438,0.021645697163520296,0.02370531755706955,0.016142722576320448,0,-0.020074562329109397,-0.03681098927798099,-0.042343141024458915,-0.030702876454896947,0,0.04645327647610439,0.10052011817319324,0.1511053644182286,0.18701804400754127,0.20000081548824558,0.18701804400754127,0.1511053644182286,0.10052011817319324,0.04645327647610439,0,-0.030702876454896947,-0.042343141024458915,-0.03681098927798099,-0.020074562329109397,0,0.016142722576320448,0.02370531755706955,0.021645697163520296,0.012277325204595438,0,-0.010465607322941285,-0.015709698578007282,-0.014611633534411483,-0.008417677842880654,0,0.007353018267926311,0.011143508052010462,0.010449297196820782,0.006061524638772063,0,-0.005352125763130234,-0.008144378671865767,-0.007662686933554121,-0.0044570782891071295,0,0.003950054660306627,0.006017472498842669,0.00566532706931101,0.003296141237604943,0,-0.0029194799546829464,-0.004443993539053824,-0.004179352395182462,-0.0024282305097344335,0,0.002143095255795543,0.003255155997304318,0.00305398305381819,0.001769730764168804,0,-0.0015527116704284528,-0.0023507044124620813,-0.002197754405412634,-0.0012688685421190658,0,0.001104404805543951,0.0016648187772294748,0.0015494972864056608,0.0008903925455355188,0,-0.0007672314627030939,-0.0011503813056690617,-0.0010647468033007158,-0.0006083017503010663,0,0.0005177494082977136,0.0007712608858983274,0.0007090203714048427,0.000402222120842694,0,-0.00033725438732877256,-0.0004984054445727851,-0.00045440061331751346,-0.0002555591912963088,0,0.00021036532399005902,0.00030783794483799884,0.0002777805252547731,0.0001545479964404763,0,-0.00012429381710443675,-0.00017961828331638003,-0.00015995022407666937,-0.00008775541104241866,0,0.00006845343044659998,0.00009727933667975703,0.00008509085880939846,0.00004579745989325527,0,-0.00003422270709081759,-0.000047470571766681586,-0.000040439716137378155,-0.000021142611483261753,0,0.000014761457752771285,0.000019666272418457612,0.000016001201746706175,0.000007933433203193437,0,-0.000004829620627224069,-0.000005868135827791082,-0.000004244146293789394,-0.0000017958013329629392};
	}
}